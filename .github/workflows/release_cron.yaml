name: "ðŸŒ³ Deforestation: Cleanup Old Release Branches"

on:
  schedule:
    - cron: "0 0 1 * *" # Once a month
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Activer le mode dry-run (ne supprime pas les branches)"
        required: false
        default: "true"

jobs:
  cleanup-release-branches:
    name: "ðŸŒ³ Deforestation Job"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get branches starting with 'release/'
        id: list_branches
        run: |
          git fetch --all --prune
          branches=$(git for-each-ref --sort=-committerdate refs/remotes/origin/release/* --format='%(refname:short)|%(committerdate:iso)' | grep -v 'HEAD' | sed 's/origin\///')
          safe_branches=$(echo "$branches" | tr '\n' ',' | sed 's/,$//')
          echo "branches=$safe_branches" >> $GITHUB_ENV

      - name: Filter branches older than 6 months
        id: filter_branches
        run: |
          now=$(date +%s)
          six_months_ago=$(date -d "6 months ago" +%s)
          filtered=""
          IFS=',' read -r -a branch_array <<< "$branches"
          for branch in "${branch_array[@]}"; do
            branch_name=$(echo "$branch" | cut -d'|' -f1)
            branch_date=$(echo "$branch" | cut -d'|' -f2)
            branch_timestamp=$(date -d "$branch_date" +%s)
            if [ $branch_timestamp -lt $six_months_ago ]; then
              filtered+="$branch_name,"
            fi
          done
          filtered=$(echo "$filtered" | sed 's/,$//') # Retirer la derniÃ¨re virgule
          echo "old_branches=$filtered" >> $GITHUB_ENV

      - name: Keep only the latest 5 branches
        id: prune_branches
        run: |
          IFS=',' read -r -a old_branch_array <<< "$old_branches"
          to_delete=$(echo "${old_branch_array[@]}" | tr ' ' '\n' | tail -n +6 | tr '\n' ',' | sed 's/,$//')
          echo "to_delete=$to_delete" >> $GITHUB_ENV

      - name: Annotate results
        run: |
          # Ajouter un titre principal dans le rÃ©sumÃ©
          echo "### Deforestation Report ðŸŒ³" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Ajouter la liste des branches filtrÃ©es (plus anciennes que 6 mois)
          echo "**Branches older than 6 months (filtered):**" >> $GITHUB_STEP_SUMMARY
          IFS=',' read -r -a branch_array <<< "$old_branches"
          for branch in "${branch_array[@]}"; do
            echo "- $branch" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY

          # Ajouter la section des branches Ã  supprimer, excluant les 5 plus rÃ©centes
          if [ -z "$to_delete" ]; then
            echo "**No branches to delete after keeping the 5 most recent.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Branches to be deleted (excluding the 5 most recent):**" >> $GITHUB_STEP_SUMMARY
            IFS=',' read -r -a delete_branch_array <<< "$to_delete"
            for branch in "${delete_branch_array[@]}"; do
              echo "- $branch" >> $GITHUB_STEP_SUMMARY
            done
          fi

      - name: Delete branches
        if: ${{ inputs.dry_run != 'true' && env.to_delete != '' }}
        run: |
          IFS=',' read -r -a delete_branch_array <<< "$to_delete"
          for branch in "${delete_branch_array[@]}"; do
            echo "Deleting branch: $branch"
            git push origin --delete "$branch" || exit 1
          done

      - name: Dry run notice
        if: ${{ inputs.dry_run == 'true' }}
        run: |
          echo "::notice::Dry run mode enabled. No branches were deleted."
